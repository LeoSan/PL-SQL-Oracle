CREATE OR REPLACE PACKAGE  BODY                                                   OPERACION.PKG_ELP_VERIFICACION_DOCUMENTO AS      
   PROCEDURE SP_INSERTA_VERIFICACION_DOC(     
      PTASK_PM VARCHAR2,
      PID_DOCUMENTO_ETAPA    OPERACION.ELP_DOCUMENTO_ETAPA.ID_DOCUMENTO_ETAPA%TYPE,
      PID_RESULTADO_DOCUMENTO OPERACION.CAT_RESULTADO_DOCUMENTO.ID_RESULTADO_DOCUMENTO%TYPE,  
      PDOCUMENTO_CALCULO OPERACION.ELP_DOCUMENTO_ETAPA.DOCUMENTO_CALCULO%TYPE,
      PVERIFICADOR VARCHAR2,
      PFECHA_VERIFICACION DATE
    ) IS    
   BEGIN         
        UPDATE OPERACION.ELP_DOCUMENTO_ETAPA 
        SET ID_RESULTADO_DOCUMENTO=PID_RESULTADO_DOCUMENTO,
        FECHA_VERIFICACION=PFECHA_VERIFICACION,
        DOCUMENTO_CALCULO=PDOCUMENTO_CALCULO,
        EN_PROCESO=0,
  VERIFICADOR=PVERIFICADOR
        WHERE ID_DOCUMENTO_ETAPA=PID_DOCUMENTO_ETAPA;
        
        INSERT INTO OPERACION.ELP_VERIFICACION_DOCUMENTO(ID_VERIFICACION_DOCUMENTO, ID_DOCUMENTO_ETAPA, ID_RESULTADO_DOCUMENTO, FECHA_VERIFICACION, VERIFICADOR, TASK_PM) 
        VALUES(OPERACION.SEQ_ELP_JURISDICCION_JUZGADO.NEXTVAL, PID_DOCUMENTO_ETAPA, PID_RESULTADO_DOCUMENTO, PFECHA_VERIFICACION, PVERIFICADOR, PTASK_PM);
         
   END SP_INSERTA_VERIFICACION_DOC;
   
   PROCEDURE SP_INSERTA_VERIFICACION_DOC(    
      PTASK_PM VARCHAR2,
      PID_DOCUMENTO_ETAPA    OPERACION.ELP_DOCUMENTO_ETAPA.ID_DOCUMENTO_ETAPA%TYPE,
      PID_RESULTADO_DOCUMENTO OPERACION.CAT_RESULTADO_DOCUMENTO.ID_RESULTADO_DOCUMENTO%TYPE,  
      PDOCUMENTO_CALCULO OPERACION.ELP_DOCUMENTO_ETAPA.DOCUMENTO_CALCULO%TYPE,
      PVERIFICADOR VARCHAR2
    ) IS    
   BEGIN         
         SP_INSERTA_VERIFICACION_DOC(PTASK_PM, PID_DOCUMENTO_ETAPA, PID_RESULTADO_DOCUMENTO, PDOCUMENTO_CALCULO, PVERIFICADOR, SYSDATE);        
   END SP_INSERTA_VERIFICACION_DOC;
   
   PROCEDURE SP_INSERTA_VERIFICACION_UDL (  
        PTASK_PM VARCHAR2,
        PVERIFICACIONES_DOC OPERACION.PKG_ELP_VERIFICACION_DOCUMENTO.VERIFICACION_DOCUMENTO_TAB,            
        PVERIFICADOR VARCHAR2      
    ) IS  
    LFECHA_VERIFICACION DATE;
    LVERIF_DOC VERIFICACION_DOCUMENTO_REC;    
    LVERIFICADOS NUMBER:=0;
   BEGIN        
        LFECHA_VERIFICACION:=SYSDATE;   
        
        if PVERIFICACIONES_DOC.count=0 then
            raise_application_error(-20001  , 'Es requerido calificar al menos un documento'); 
        end if;
        FOR i IN 1..PVERIFICACIONES_DOC.count LOOP
            LVERIF_DOC:=PVERIFICACIONES_DOC(i);    
            if  LVERIF_DOC.ID_RESULTADO_DOCUMENTO is not null AND LVERIF_DOC.ID_RESULTADO_DOCUMENTO<>0 then 
                SP_INSERTA_VERIFICACION_DOC(PTASK_PM,
                                            LVERIF_DOC.ID_DOCUMENTO_ETAPA, 
                                            LVERIF_DOC.ID_RESULTADO_DOCUMENTO, 
                                            1, 
                                            PVERIFICADOR, 
                                            LFECHA_VERIFICACION);  
                LVERIFICADOS:=LVERIFICADOS+1;      
            end if;
        END LOOP;
        IF LVERIFICADOS=0 THEN
            raise_application_error(-20002  , 'Es requerido calificar al menos un documento'); 
        END IF;
   END SP_INSERTA_VERIFICACION_UDL;
   
   PROCEDURE SP_INSERTA_VERIFICACION_UDL (   
        st_cursor out SYS_REFCURSOR,     
        PID_VERIFICACION NUMBER,
        PTASK_PM VARCHAR2,
        PVERIFICACIONES_DOC OPERACION.PKG_ELP_VERIFICACION_DOCUMENTO.VERIFICACION_DOCUMENTO_TAB,            
        PVERIFICADOR VARCHAR2      
    ) IS  
    LCODIGO NUMBER:=0;
    LMENSAJE VARCHAR2(100):='VERIFICACION GUARDADA CORRECTAMENTE';   
    LEXISTENTES NUMBER;
 
 LID_JUICIO NUMBER;
   BEGIN       
    begin
            
            SELECT COUNT(1) INTO LEXISTENTES
            FROM OPERACION.ELP_PROC_VERIFICA_DOC
            WHERE FECHA_FIN IS NOT NULL 
            AND ID_PROC_VERIFICA_DOC=PID_VERIFICACION;
   
   
   SELECT J.ID_JUICIO INTO LID_JUICIO
   FROM OPERACION.ELP_PROC_VERIFICA_DOC PV
   JOIN OPERACION.ELP_ETAPA_JUICIO EJ ON (PV.ID_ETAPA_JUICIO=EJ.ID_ETAPA_JUICIO)
   JOIN OPERACION.ELP_JUICIO J ON (EJ.ID_JUICIO=J.ID_JUICIO)
   WHERE PV.ID_PROC_VERIFICA_DOC=PID_VERIFICACION;

            
            IF LEXISTENTES>0 THEN
                LCODIGO:=-1;
                LMENSAJE:='EL PROCESO DE VERIFICACION HA SIDO COMPLETADO CON ANTERIORIDAD';
            ELSE
                UPDATE OPERACION.ELP_PROC_VERIFICA_DOC 
                SET FECHA_FIN=SYSDATE
                WHERE ID_PROC_VERIFICA_DOC=PID_VERIFICACION;
                
                SP_INSERTA_VERIFICACION_UDL (   
                    PTASK_PM,
                    PVERIFICACIONES_DOC,
                    PVERIFICADOR
                );
                UPDATE OPERACION.ELP_DOCUMENTO_ETAPA
                SET DOCUMENTO_CALCULO=1
                WHERE ID_DOCUMENTO_ETAPA IN(
                    SELECT ID_DOCUMENTO_ETAPA 
                    FROM OPERACION.ELP_SOLICITUD_VERIF_UDL
                    WHERE ID_PROC_VERIFICA_DOC=PID_VERIFICACION
                ); 
    
    OPERACION.PKG_ELP_GENERACION_CALCULOS.SP_ACTUALIZA_METRICAS( LID_JUICIO );
            END IF;

         EXCEPTION
            WHEN OTHERS THEN
            LCODIGO:=-1;
            LMENSAJE:='Error: '||SQLERRM;
        end;
        
        OPEN st_cursor FOR               
        SELECT LCODIGO AS CODIGO, 
        LMENSAJE AS MENSAJE 
        FROM DUAL;     
   END SP_INSERTA_VERIFICACION_UDL;
   
   
   PROCEDURE SP_SOLICITAR_VERIFICACION_UDL(
        PID_DOCUMENTO_ETAPA    OPERACION.ELP_DOCUMENTO_ETAPA.ID_DOCUMENTO_ETAPA%TYPE,
        PGRUPO_VERIFICACION    OPERACION.ELP_DOCUMENTO_ETAPA.GRUPO_VERIFICACION%TYPE,
        PSOLICITANTE VARCHAR2      
    ) IS    
   BEGIN         
        UPDATE  OPERACION.ELP_DOCUMENTO_ETAPA 
        SET GRUPO_VERIFICACION=PGRUPO_VERIFICACION,
        EN_PROCESO=1,
        DOCUMENTO_CALCULO=1
        WHERE ID_DOCUMENTO_ETAPA=PID_DOCUMENTO_ETAPA;
        
   END SP_SOLICITAR_VERIFICACION_UDL;
   
   PROCEDURE SP_GET_DOCS_ETAPA_JUICIO(st_cursor out SYS_REFCURSOR, PID_PROC_VERIFICA_IN in NUMBER) IS        
   BEGIN             
        OPEN st_cursor FOR    
            SELECT DE.ID_DOCUMENTO_ETAPA AS "idDocumentoEtapa", 
            DE.FECHA_CARGA AS "fechaCarga", 
            DE.FECHA_DOCUMENTO AS "fechaDocumento", 
            DE.DESCRIPCION AS "descripcionDocumento", 
            FG.PATHPUBLIC AS "urlDocumento",  
            DE.RESPONSABLE as "responsableDocumento",
            0  AS "documentoCierre",
            DE.DOCUMENTO_CALCULO AS "documentoCalculo",
            RD.ID_RESULTADO_DOCUMENTO AS "idResultadoDocumento", 
            RD.DESCRIPCION AS "descripcionResultado",
            null as "verificador"
            FROM  OPERACION.ELP_PROC_VERIFICACION PV
            JOIN OPERACION.ELP_DOCUMENTO_ETAPA DE ON(PV.ID_ETAPA_JUICIO=DE.ID_ETAPA_JUICIO)
            JOIN OPERACION.FILEGRID FG ON(DE.INDICE_FILEGRID=FG.INDICE) 
            LEFT JOIN OPERACION.CAT_RESULTADO_DOCUMENTO RD ON(DE.ID_RESULTADO_DOCUMENTO=RD.ID_RESULTADO_DOCUMENTO)
            LEFT JOIN (select * from OPERACION.ELP_CONFIGURACION  where ID_CONFIGURACION_EL in(select max(ID_CONFIGURACION_EL) from OPERACION.ELP_CONFIGURACION)) CF ON(CF.ID_CONFIGURACION_EL is not null)
            WHERE DE.ACTIVO=1  
            AND PV.ID_PROC_VERIFICACION=PID_PROC_VERIFICA_IN   
            and DE.ID_TIPO_DOCUMENTO <>CF.ID_DOCUMENTO_CIERRE      --Obtencion de todos los que no sean de cierre
            union
            SELECT DE.ID_DOCUMENTO_ETAPA AS "idDocumentoEtapa", 
            DE.FECHA_CARGA AS "fechaCarga", 
            DE.FECHA_DOCUMENTO AS "fechaDocumento", 
            DE.DESCRIPCION AS "descripcionDocumento", 
            FG.PATHPUBLIC AS "urlDocumento",  
            DE.RESPONSABLE as "responsableDocumento",
            1  AS "documentoCierre",
            DE.DOCUMENTO_CALCULO AS "documentoCalculo",
            RD.ID_RESULTADO_DOCUMENTO AS "idResultadoDocumento", 
            RD.DESCRIPCION AS "descripcionResultado",
            null as "verificador"
            from OPERACION.ELP_DOCUMENTO_ETAPA DE 
            JOIN OPERACION.FILEGRID FG ON(DE.INDICE_FILEGRID=FG.INDICE) 
            LEFT JOIN OPERACION.CAT_RESULTADO_DOCUMENTO RD ON(DE.ID_RESULTADO_DOCUMENTO=RD.ID_RESULTADO_DOCUMENTO)
            join (
                select max(DEX.ID_DOCUMENTO_ETAPA) as ID_DOCUMENTO_ETAPA
                FROM  OPERACION.ELP_PROC_VERIFICACION PV
                JOIN OPERACION.ELP_DOCUMENTO_ETAPA DEX ON(PV.ID_ETAPA_JUICIO=DEX.ID_ETAPA_JUICIO)
                JOIN OPERACION.FILEGRID FG ON(DEX.INDICE_FILEGRID=FG.INDICE) 
                LEFT JOIN OPERACION.CAT_RESULTADO_DOCUMENTO RD ON(DEX.ID_RESULTADO_DOCUMENTO=RD.ID_RESULTADO_DOCUMENTO)
                LEFT JOIN (select * from OPERACION.ELP_CONFIGURACION  where ID_CONFIGURACION_EL in(select max(ID_CONFIGURACION_EL) from OPERACION.ELP_CONFIGURACION)) CF ON(CF.ID_CONFIGURACION_EL is not null)
                WHERE DEX.ACTIVO=1  
                AND PV.ID_PROC_VERIFICACION=PID_PROC_VERIFICA_IN   
                and DEX.ID_TIPO_DOCUMENTO =CF.ID_DOCUMENTO_CIERRE      --Obtencion del ultimo documento de cierre
           ) maxd on(DE.ID_DOCUMENTO_ETAPA=maxd.ID_DOCUMENTO_ETAPA)
            order by 1 desc;
            
   END SP_GET_DOCS_ETAPA_JUICIO;    
   
   PROCEDURE SP_GET_DOCS_CALC_ETAPA_JUICIO(st_cursor out SYS_REFCURSOR, PID_PROC_VERIFICA_DOC in NUMBER, PID_GRUPO_DOCUMENTOS_IN in NUMBER) IS        
   BEGIN   
        SP_GET_DOCS_CALC_ETAPA_JUICIO(st_cursor, PID_PROC_VERIFICA_DOC);        
   END SP_GET_DOCS_CALC_ETAPA_JUICIO;  
   
   PROCEDURE SP_GET_DOCS_CALC_ETAPA_JUICIO(st_cursor out SYS_REFCURSOR, PID_PROC_VERIFICA_DOC in NUMBER) IS        
   BEGIN             
        OPEN st_cursor FOR    
            SELECT DE.ID_DOCUMENTO_ETAPA AS "idDocumentoEtapa", 
            DE.FECHA_CARGA AS "fechaCarga", 
            DE.FECHA_DOCUMENTO AS "fechaDocumento", 
            DE.DESCRIPCION AS "descripcionDocumento", 
            FG.PATHPUBLIC AS "urlDocumento",  
            DE.RESPONSABLE as "responsableDocumento",
            (CASE WHEN DE.ID_TIPO_DOCUMENTO =CF.ID_DOCUMENTO_CIERRE THEN
                 1
             ELSE
                 0
             END)  AS "documentoCierre",
            DE.DOCUMENTO_CALCULO AS "documentoCalculo",
            RD.ID_RESULTADO_DOCUMENTO AS "idResultadoDocumento", 
            RD.DESCRIPCION AS "descripcionResultado",
            null as "verificador"
            FROM OPERACION.ELP_SOLICITUD_VERIF_UDL SVU 
            JOIN OPERACION.ELP_DOCUMENTO_ETAPA DE ON(SVU.ID_DOCUMENTO_ETAPA=DE.ID_DOCUMENTO_ETAPA)
            JOIN OPERACION.FILEGRID FG ON(DE.INDICE_FILEGRID=FG.INDICE) 
            LEFT JOIN OPERACION.CAT_RESULTADO_DOCUMENTO RD ON(DE.ID_RESULTADO_DOCUMENTO=RD.ID_RESULTADO_DOCUMENTO)
            LEFT JOIN (select * from OPERACION.ELP_CONFIGURACION  where ID_CONFIGURACION_EL in(select max(ID_CONFIGURACION_EL) from OPERACION.ELP_CONFIGURACION)) CF ON(CF.ID_CONFIGURACION_EL is not null)
            WHERE DE.ACTIVO=1  
            AND SVU.ID_PROC_VERIFICA_DOC=PID_PROC_VERIFICA_DOC
            order by DE.ID_DOCUMENTO_ETAPA desc;    
   END SP_GET_DOCS_CALC_ETAPA_JUICIO; 

    
   
    PROCEDURE SP_GET_RESULTADOS_VERIFICA(st_cursor out SYS_REFCURSOR) IS        
   BEGIN             
        OPEN st_cursor FOR    
           SELECT  0 AS ID, 'NINGUNO' AS CLAVE, 'SIN CALIFICAR' DESCRIPCION, 1 as ES_CORRECTO FROM DUAL
            UNION
            SELECT ID_RESULTADO_DOCUMENTO ID, CLAVE, DESCRIPCION, 1 as ES_CORRECTO
            FROM OPERACION.CAT_RESULTADO_DOCUMENTO 
            WHERE ACTIVO=1
            ORDER BY 1 ASC;
   END SP_GET_RESULTADOS_VERIFICA; 
   
   PROCEDURE SP_GET_INFO_ETAPA_JUICIO(st_cursor out SYS_REFCURSOR, PID_PROC_VERIFICA_DOC in NUMBER) IS        
   BEGIN             
        OPEN st_cursor FOR    
            SELECT EJ.ID_ETAPA_JUICIO AS IDETAPAJUICIO, 
            UTP.TASK_PM as TASKPM,
            EL.NUMERO AS NUMEROETAPA, 
            EJ.FECHA_INICIO AS FECHAINICIO,
            EJ.FECHA_TERMINO AS FECHATERMINO,
            EL.NOMBRE AS NOMBREETAPA, 
            J.NUMERO AS NUMEROJUICIO,
            C.NUMERO AS CUENTA ,
            CAR.CLAVE AS CLAVECARTERA,
            CAR.DESCRIPCION AS NOMBRECARTERA,
            CA.ceextlwyr as ABOGADOEXTERNO,
            CLE.CLMAIL AS CORREOEXTERNO,
            CLE.CLNAME AS NOMBREEXTERNO,
            CA.CERESPLWYR AS ABOGADOINTERNO,
            CA.CENAME AS DEMANDADO,
            CA.CEDOSSIERID AS EXPEDIENTE,
            JU.DESCRIPCION AS JUZGADO,
            CLI.CLMAIL AS CORREOINTERNO,
            CLI.CLNAME AS NOMBREINTERNO,
            CLS.CLMAIL AS CORREOSUPERVISOR,
            CLSS.CLMAIL AS CORREOSOLICITANTE,            
            ( CASE WHEN DEM.ID_DOCUMENTO_ETAPA IS NOT NULL AND DEM.ID_DOCUMENTO_ETAPA IN (
                    SELECT ID_DOCUMENTO_ETAPA FROM OPERACION.ELP_SOLICITUD_VERIF_UDL
                    WHERE ID_PROC_VERIFICA_DOC=PVD.ID_PROC_VERIFICA_DOC
                ) THEN
                    1   
                when DEM.ID_DOCUMENTO_ETAPA IS NOT NULL then
                    0
                ELSE
                    null
                END 
            ) AS ESCORRECTA,
            ( CASE WHEN DEM.ID_DOCUMENTO_ETAPA IS NOT NULL THEN                   
                    (case when  DEM.ID_DOCUMENTO_ETAPA IN (
                        SELECT ID_DOCUMENTO_ETAPA FROM OPERACION.ELP_SOLICITUD_VERIF_UDL
                        WHERE ID_PROC_VERIFICA_DOC=PVD.ID_PROC_VERIFICA_DOC
                    )  then
                         'La verificacion ha generado la fecha de Ultimo Documento Legal: '|| to_char(DE.FECHA_DOCUMENTO, 'DD-Mon-YY','NLS_DATE_LANGUAGE = SPANISH' )
                    else
                         'El resultado de la verificacion no ha generado una nueva fecha. La fecha de Ultimo Documento es: '|| to_char(DE.FECHA_DOCUMENTO, 'DD-Mon-YY','NLS_DATE_LANGUAGE = SPANISH' )    
                    end
                    )          
                ELSE 
                   'La verificacion no ha generado una fecha de Ultimo Documento Legal'
                END 
            ) AS MENSAJERESULTADO
            FROM OPERACION.ELP_PROC_VERIFICA_DOC PVD
            JOIN OPERACION.ELP_ETAPA_JUICIO EJ ON(PVD.ID_ETAPA_JUICIO=EJ.ID_ETAPA_JUICIO)
            JOIN OPERACION.ELP_JUICIO J ON(EJ.ID_JUICIO=J.ID_JUICIO)            
            JOIN OPERACION.CAT_ETAPA_LEGAL EL ON(EJ.ID_ETAPA_LEGAL=EL.ID_ETAPA_LEGAL)
   LEFT JOIN OPERACION.ELP_CREDITO_JUICIO CJ ON(J.ID_JUICIO=CJ.ID_JUICIO)
            LEFT JOIN OPERACION.ELP_CREDITO C ON(C.ID_CREDITO=CJ.ID_CREDITO)
            LEFT JOIN OPERACION.CAT_CARTERA CAR ON(CAR.ID_CARTERA=C.ID_CARTERA)     
            LEFT JOIN OPERACION.CAT_JUZGADO JU ON (J.ID_JUZGADO=JU.ID_JUZGADO)            
            LEFT JOIN RCVRY.CASE CA ON (J.NUMERO=CA.CECASENO)
            LEFT JOIN RCVRY.COLLID CLI ON (CA.CERESPLWYR  =  CLI.CLCOLLID)
            LEFT JOIN RCVRY.COLLID CLE ON (CA.ceextlwyr  =  CLE.CLCOLLID)
   left join RCVRY.COLLID CLS ON (CA.CESUPVLWYR  =  CLS.CLCOLLID)
   left join RCVRY.COLLID CLSS ON (CLSS.clcollid =PVD.SOLICITANTE)
            LEFT JOIN (
                SELECT VDP.* FROM OPERACION.ELP_VERIFICACION_DOCUMENTO VDP 
                JOIN (
                    SELECT MAX(ID_VERIFICACION_DOCUMENTO) AS ID_VERIFICACION_DOCUMENTO FROM OPERACION.ELP_VERIFICACION_DOCUMENTO VD
                    JOIN OPERACION.ELP_SOLICITUD_VERIF_UDL SVU ON (VD.ID_DOCUMENTO_ETAPA=SVU.ID_DOCUMENTO_ETAPA)
                    GROUP BY SVU.ID_PROC_VERIFICA_DOC
                )VDM ON (VDP.ID_VERIFICACION_DOCUMENTO=VDM.ID_VERIFICACION_DOCUMENTO)
            )UTP ON (PVD.ID_PROC_VERIFICA_DOC=UTP.ID_PROC_VERIFICA_DOC)
            LEFT JOIN (
                SELECT MAX(ID_DOCUMENTO_ETAPA) AS ID_DOCUMENTO_ETAPA, DEI.ID_ETAPA_JUICIO AS ID_ETAPA_JUICIO 
                FROM OPERACION.ELP_DOCUMENTO_ETAPA DEI 
                JOIN (
                    SELECT CFI.* FROM OPERACION.ELP_CONFIGURACION CFI
                                JOIN (
                                    SELECT MAX(ID_CONFIGURACION_EL) AS ID_CONFIGURACION_EL FROM OPERACION.ELP_CONFIGURACION
                                )CFM ON (CFI.ID_CONFIGURACION_EL=CFM.ID_CONFIGURACION_EL)
                ) CFG ON (DEI.ID_RESULTADO_DOCUMENTO=CFG.ID_RES_DOC_CALCULO)                     
                GROUP BY ID_ETAPA_JUICIO
            )DEM  ON ( DEM.ID_ETAPA_JUICIO = EJ.ID_ETAPA_JUICIO AND DEM.ID_DOCUMENTO_ETAPA IS NOT NULL )        
            LEFT JOIN OPERACION.ELP_DOCUMENTO_ETAPA DE  ON (DE.ID_DOCUMENTO_ETAPA=DEM.ID_DOCUMENTO_ETAPA)
            WHERE PVD.ID_PROC_VERIFICA_DOC=PID_PROC_VERIFICA_DOC;
            
   END SP_GET_INFO_ETAPA_JUICIO; 
   
   PROCEDURE SP_GET_INFO_ETAPA_JUICIO(st_cursor out SYS_REFCURSOR, PID_PROC_VERIFICA_DOC in NUMBER, PID_GRUPO_DOCUMENTOS_IN in NUMBER) IS        
   BEGIN             
        SP_GET_INFO_ETAPA_JUICIO(st_cursor, PID_PROC_VERIFICA_DOC);  
   END SP_GET_INFO_ETAPA_JUICIO; 
   
   PROCEDURE SP_GET_MENSAJES_CORREO(st_cursor out SYS_REFCURSOR, PID_ETAPA_JUICIO_IN in NUMBER, PID_GRUPO_DOCUMENTOS_IN in NUMBER) IS
   BEGIN   
   OPEN st_cursor FOR    
   SELECT '' as TEXTO_MENSAJE FROM DUAL
   WHERE 1<>1;
   /*
         select 'Mensaje 1.' as TEXTO_MENSAJE FROM DUAL
         UNION
         select 'Mensaje 2.' as TEXTO_MENSAJE FROM DUAL;*/
   END SP_GET_MENSAJES_CORREO; 
   
   
   PROCEDURE SP_INSERTA_VERIFICACIONQ_UDL (   
        st_cursor out SYS_REFCURSOR,     
        PID_VERIFICACION NUMBER,
        PTASK_PM VARCHAR2,
        ID_DOCUMENTO_ETAPA NUMBER,
        ID_RESULTADO_DOCUMENTO NUMBER,
        DOCUMENTO_CALCULO NUMBER,       
        PVERIFICADOR VARCHAR2      
    ) IS  
    LCODIGO NUMBER:=0;
    LMENSAJE VARCHAR2(100):='VERIFICACION GUARDADA CORRECTAMENTE';   
    LEXISTENTES NUMBER;
    LID_JUICIO NUMBER;
    PVERIFICACIONES_DOC OPERACION.PKG_ELP_VERIFICACION_DOCUMENTO.VERIFICACION_DOCUMENTO_TAB;
    
   BEGIN       
      begin
            
            SELECT COUNT(1) INTO LEXISTENTES
              FROM OPERACION.ELP_PROC_VERIFICA_DOC
             WHERE     FECHA_FIN IS NOT NULL 
                   AND ID_PROC_VERIFICA_DOC=PID_VERIFICACION;
   
   
            SELECT  J.ID_JUICIO INTO LID_JUICIO
              FROM  OPERACION.ELP_PROC_VERIFICA_DOC PV
              JOIN  OPERACION.ELP_ETAPA_JUICIO EJ 
                ON  (PV.ID_ETAPA_JUICIO=EJ.ID_ETAPA_JUICIO)
              JOIN  OPERACION.ELP_JUICIO J 
                ON  (EJ.ID_JUICIO=J.ID_JUICIO)
             WHERE  PV.ID_PROC_VERIFICA_DOC=PID_VERIFICACION;

            
            IF LEXISTENTES>0 THEN
                LCODIGO:=-1;
                LMENSAJE:='EL PROCESO DE VERIFICACION HA SIDO COMPLETADO CON ANTERIORIDAD';
            ELSE
                UPDATE OPERACION.ELP_PROC_VERIFICA_DOC 
                SET FECHA_FIN=SYSDATE
                WHERE ID_PROC_VERIFICA_DOC=PID_VERIFICACION;
                
                PVERIFICACIONES_DOC(1).ID_DOCUMENTO_ETAPA := ID_DOCUMENTO_ETAPA;
                PVERIFICACIONES_DOC(1).ID_RESULTADO_DOCUMENTO := ID_RESULTADO_DOCUMENTO;
                PVERIFICACIONES_DOC(1).DOCUMENTO_CALCULO := DOCUMENTO_CALCULO;
                
                SP_INSERTA_VERIFICACION_UDL (   
                    PTASK_PM,
                    PVERIFICACIONES_DOC,
                    PVERIFICADOR
                );
                UPDATE OPERACION.ELP_DOCUMENTO_ETAPA
                SET DOCUMENTO_CALCULO=1
                WHERE ID_DOCUMENTO_ETAPA IN(
                    SELECT ID_DOCUMENTO_ETAPA 
                    FROM OPERACION.ELP_SOLICITUD_VERIF_UDL
                    WHERE ID_PROC_VERIFICA_DOC=PID_VERIFICACION
                ); 
    
                OPERACION.PKG_ELP_GENERACION_CALCULOS.SP_ACTUALIZA_METRICAS( LID_JUICIO );
            END IF;

      EXCEPTION
         WHEN OTHERS THEN
         LCODIGO:=-1;
         LMENSAJE:='Error: '||SQLERRM;
      end;
        
      OPEN st_cursor FOR               
         SELECT LCODIGO AS CODIGO,  LMENSAJE AS MENSAJE 
           FROM DUAL;     
   END SP_INSERTA_VERIFICACIONQ_UDL;
   
   
END PKG_ELP_VERIFICACION_DOCUMENTO;
/
